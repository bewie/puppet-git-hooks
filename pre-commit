#!/bin/bash
# pre-commit git hook to check the validity of a puppet manifest
#
# Prerequisites:
#   gem install puppet-lint puppet
#
# Install:
#  /path/to/repo/.git/hooks/pre-commit
#
# Original:
#  blog: http://techblog.roethof.net/puppet/a-puppet-git-pre-commit-hook-is-always-easy-to-have/
#


CLR_ESC="\033["

CLR_RESET=0             # reset all attributes to their defaults
CLR_RED=31              # set red foreground
CLR_GREEN=32            # set green foreground
CLR_YELLOW=33           # set green foreground


# General function to wrap string with escape seqence(s).
function print_c
{
  local result="$1"
  until [ -z "$2" ]; do
    if ! [ $2 -ge 0 -a $2 -le 47 ] 2>/dev/null; then
      echo "print_c: argument \"$2\" is out of range" >&2 && return 1
    fi
    result="${CLR_ESC}${2}m${result}${CLR_ESC}${CLR_RESET}m"
    shift || break
  done

  echo -e -n "$result"
}

function put_red             { print_c "$1" $CLR_RED;             }
function put_green           { print_c "$1" $CLR_GREEN;           }
function put_yellow          { print_c "$1" $CLR_YELLOW;          }



function checkyaml() {
  ruby -e "require 'yaml'; YAML.load_file('$1')"
}

echo "### Checking puppet syntax, for science! ###"
# for file in `git diff --name-only --cached | grep -E '\.(pp|erb)'`
for file in `git diff --name-only --cached | grep -E '\.(pp)'`
do
  # Only check new/modified files that end in *.pp extension
  if [[ -f $file && $file == *.pp ]]
  then
  puppet_lint_cmd="puppet-lint --fail-on-warnings --with-filename"
  puppet_lint_rcfile="${HOME}/.puppet-lint.rc"
  if [ -f $puppet_lint_rcfile ]; then
    puppet_lint_cmd="$puppet_lint_cmd --config $puppet_lint_rcfile"
  else
    puppet_lint_cmd="$puppet_lint_cmd --no-80chars-check"
fi
    $puppet_lint_cmd $file

#    Set us up to bail if we receive any syntax errors
    if [[ $? -ne 0 ]]
    then
      put_red "Error"
      echo ": styleguide violation(s) found. Commit will be aborted."
      syntax_is_bad=1
    else
      put_green "Ok"
      echo ": $file looks good"
    fi
  fi
done
echo ""

echo "### Checking if puppet manifests are valid ###"
# validating the whole manifest takes too long. uncomment this
# if you want to test the whole shebang.
# for file in `find . -name "*.pp"`
# for file in `git diff --name-only --cached | grep -E '\.(pp|erb)'`
for file in `git diff --name-only --cached | grep -E '\.(pp)'`
do
  if [[ -f $file && $file == *.pp ]]
  then
    puppet parser validate --parser future $file
    if [[ $? -ne 0 ]]
    then
      put_red "Error"
      echo ": puppet parser failed at: $file"
      syntax_is_bad=1
    else
      put_green "Ok"
      echo ": $file looks valid"
    fi
  fi
done
echo ""

if [[ -f manifests/site.pp ]]
then
  echo "### Checking if the catalog compiles"
  puppet apply --noop manifests/site.pp
  if [[ $? -ne 0 ]]
  then
    put_red "Error"
    echo ": puppet catalog compilation failed"
    syntax_is_bad=1
  else
    put_green "Ok"
    echo ": $file looks valid"
  fi
fi

echo "### Checking if ruby template syntax is valid ###"
for file in `git diff --name-only --cached | grep -E '\.(erb)'`
do
  if [[ -f $file ]]
  then
    erb -P -x -T '-' $file | ruby -c
    if [[ $? -ne 0 ]]
    then
      put_red "Error"
      echo ": ruby template parser failed at: $file"
      syntax_is_bad=1
    else
      put_green "Ok"
      echo ": $file looks like a valid ruby template"
    fi
  fi
done
echo ""

echo "### Checking if YAML syntax is valid ###"
for file in `git diff --name-only --cached | grep -E '\.(yaml)'`
do
  if [[ -f $file ]]
  then
    checkyaml $file
    if [[ $? -ne 0 ]]
    then
      put_red "Error"
      echo ": YAML syntax validation failed at: $file"
      syntax_is_bad=1
    else
      put_green "Ok"
      echo ": $file looks like a valid YAML file"
    fi
  fi
done
echo ""

if [[ $syntax_is_bad -eq 1 ]]
then
  put_red "FATAL"
  echo ": Syntax is bad. See above errors"
  echo "Bailing"
  exit 1
else
  put_green "ok! "
  echo "Everything looks good."
fi
